#! /bin/sh
### BEGIN INIT INFO
# Provides:          carbon-aggregator
# Required-Start:    $remote_fs $syslog $network
# Required-Stop:     $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Graphite aggregator daemon
# Description:       aggregator daemon for Graphite
### END INIT INFO

# Author: Jonas Genannt <jonas.genannt@capi2name.de>
# Author: Jose Plana <jplana@tuenti.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Graphite aggregator daemon"
NAME=carbon-aggregator
DAEMON=/usr/bin/$NAME
USER=<%= scope.lookupvar('graphite::gr_user') %>
GROUP=<%= scope.lookupvar('graphite::gr_group') %>
CONFIG=<%= scope.lookupvar('graphite::config::carbon_conf_file') %>
PIDDIR="/var/run/carbon/"
DAEMON_ARGS="--config=${CONFIG}"
SCRIPTNAME=/etc/init.d/$NAME                                                                                                                                                                                                                                              [72/210]
OPERATION="$1"
if [ $# -gt 1 ]; then
    shift
    INSTANCES=$*
else
    INSTANCES=$(grep "^\[relay:" ${CONFIG} | cut -d \[ -f 2 | cut -d \] -f 1 | cut -d : -f 2)
fi

[ -x "$DAEMON" ] || exit 0

[ -r /etc/default/graphite-aggregator ] && . /etc/default/graphite-aggregator

. /lib/lsb/init-functions

if [ ! -r /etc/carbon/carbon.conf ]; then
        [ "$VERBOSE" != no ] && echo "Missing ${CONFIG} - not starting."
        exit 3
fi

if [ "$CARBON_AGGREGATOR_ENABLED" != "true" ] ; then
        [ "$VERBOSE" != no ] && echo "carbon-aggregator disabled in /etc/default/graphite-aggregator"
        exit 3
fi

do_start()
{
        local INSTANCE PIDFILE
        INSTANCE="$1"
        PIDFILE="${PIDDIR}/carbon-aggregator-${INSTANCE}.pid"
        start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
                || return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -c ${USER} -g ${GROUP} -- \
                $DAEMON_ARGS --instance=${INSTANCE} start\
                || return 2
}

do_stop()
{
        local INSTANCE PIDFILE
        INSTANCE="$1"
        PIDFILE="${PIDDIR}/carbon-aggregator-${INSTANCE}.pid"                                                                                                                                                                                                             [36/210]
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
        RETVAL="$?"
        [ "$RETVAL" = 2 ] && return 2

        start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
        [ "$?" = 2 ] && return 2

        rm -f $PIDFILE
        return "$RETVAL"
}

case "$1" in
        start)
            for INSTANCE in ${INSTANCES}
            do
                [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME $INSTANCE: "
                do_start ${INSTANCE}
                case "$?" in
                    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
                esac
            done
        ;;
        stop)
            for INSTANCE in ${INSTANCES}
            do
                [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME (instance $INSTANCE)"
                do_stop ${INSTANCE}
                case "$?" in
                    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
                esac
            done
        ;;
        status)
            retcode=0                                                                                                                                                                                                                                                      [0/210]
            for INSTANCE in ${INSTANCES}
            do
                status_of_proc "$DAEMON" "$NAME (instance $INSTANCE)" -p "${PIDDIR}/carbon-aggregator-${INSTANCE}.pid"
                [ $? != 0 ] && retcode=$?
            done
            exit $retcode
        ;;
        restart|force-reload)
            for INSTANCE in ${INSTANCES}
            do
                log_daemon_msg "Restarting $DESC" "$NAME: "
                do_stop $INSTANCE
                case "$?" in
                    0|1)
                        do_start $INSTANCE
                        case "$?" in
                            0) log_end_msg 0 ;;
                            1) log_end_msg 1 ;;
                            *) log_end_msg 1 ;;
                        esac
                        ;;
                    *)
                        log_end_msg 1
                        ;;
                esac
            done
            ;;
        *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

:
